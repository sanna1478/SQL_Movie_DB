--Creating databse
CREATE DATABASE MOVIE_REVIEW;
-- Creating multiple tables inside the database
USE MOVIE_REVIEW;

CREATE TABLE USERS (
  USER_ID     INTEGER     not null AUTO_INCREMENT UNIQUE,
  NAME        VARCHAR(35) not null,
  DATE_OF_BIRTH   DATE    not null,
  PRIMARY KEY(USER_ID)
);

CREATE TABLE MOVIES(
  MOVIE_ID      INTEGER       not null AUTO_INCREMENT UNIQUE,
  MOVIE_NAME    VARCHAR(35)   not null,
  GENRE         VARCHAR(35)   not null,
  RELEASE_DATE  DATE          not null,
  PRIMARY KEY(MOVIE_ID)
);

CREATE TABLE REVIEWS(
  R_USER_ID        INTEGER       not null,
  R_MOVIE_ID       INTEGER       not null,
  MOVIE_RATING   DECIMAL(3,1)    not null DEFAULT 0.00,
  REVIEW_COMMENT VARCHAR(5000)   DEFAULT null,

  -- To create a M:N realationship creating a constraint that is a primary key
  -- combination of USER and MOVIE ID
  FOREIGN KEY(R_USER_ID) REFERENCES USERS(USER_ID) on UPDATE CASCADE,
  FOREIGN KEY(R_MOVIE_ID) REFERENCES MOVIES(MOVIE_ID) on UPDATE CASCADE,
  PRIMARY KEY(R_USER_ID, R_MOVIE_ID)
);

CREATE TABLE ACTORS(
  ACTOR_ID    INTEGER     not null AUTO_INCREMENT UNIQUE,
  ACTOR_NAME  VARCHAR(35) not null,
  GENDER      CHAR(1)     not null,
  DATE_OF_BIRTH DATE      not null,
  PRIMARY KEY(ACTOR_ID)
);

CREATE TABLE LEADS(
  LEAD_ACTOR_ID INTEGER not null,
  LEAD_MOVIE_ID  INTEGER not null,

  FOREIGN KEY(LEAD_ACTOR_ID) REFERENCES ACTORS(ACTOR_ID) ON UPDATE CASCADE,
  FOREIGN KEY(LEAD_MOVIE_ID) REFERENCES MOVIES(MOVIE_ID) ON UPDATE CASCADE,
  PRIMARY KEY(LEAD_ACTOR_ID, LEAD_MOVIE_ID)
);

INSERT intO MOVIES (MOVIE_NAME, GENRE, RELEASE_DATE) values ("Star Wars: Force Awakens","Sci-Fi",'2015-12-18');
INSERT intO MOVIES (MOVIE_NAME, GENRE, RELEASE_DATE) values ("Star Wars: A New Hope","Sci-Fi",'1977-05-25');
INSERT intO MOVIES (MOVIE_NAME, GENRE, RELEASE_DATE) values ("Blade Runner 2049","Sci_Fi",'2017-10-03');
INSERT intO MOVIES (MOVIE_NAME, GENRE, RELEASE_DATE) values ("Iron Man","Sci-Fi",'2008-05-02');
INSERT intO MOVIES (MOVIE_NAME, GENRE, RELEASE_DATE) values ("Avengers: Infinity War","Sci-Fi",'2018-04-27');
INSERT intO MOVIES (MOVIE_NAME, GENRE, RELEASE_DATE) values ("Notebook","Romance",'2004-06-25');
INSERT intO MOVIES (MOVIE_NAME, GENRE, RELEASE_DATE) values ("Hot Fuzz","Comedy",'2007-03-14');
INSERT intO MOVIES (MOVIE_NAME, GENRE, RELEASE_DATE) values ("Groundhog Day","Comedy",'1993-02-12');
INSERT intO MOVIES (MOVIE_NAME, GENRE, RELEASE_DATE) values ("Rush Hour","Comedy",'1998-09-18');
INSERT intO MOVIES (MOVIE_NAME, GENRE, RELEASE_DATE) values ("Happy Gilmore","Comedy",'1996-02-16');
INSERT intO MOVIES (MOVIE_NAME, GENRE, RELEASE_DATE) values ("Die Hard","Action",'1988-07-15');

INSERT intO ACTORS (ACTOR_NAME,GENDER, DATE_OF_BIRTH) values("Harrison Ford","m",'1942-07-13');
INSERT intO ACTORS (ACTOR_NAME,GENDER, DATE_OF_BIRTH) values("Mark Hamill","m",'1951-09-25');
INSERT intO ACTORS (ACTOR_NAME,GENDER, DATE_OF_BIRTH) values("Carrie Fisher","f",'1956-10-21');
INSERT intO ACTORS (ACTOR_NAME,GENDER, DATE_OF_BIRTH) values("Daisy Ridley","f",'1992-04-10');
INSERT intO ACTORS (ACTOR_NAME,GENDER, DATE_OF_BIRTH) values("Ryan Gosling","m",'1980-11-12');
INSERT intO ACTORS (ACTOR_NAME,GENDER, DATE_OF_BIRTH) values("Robert Downey Jr","m",'1965-04-04');
INSERT intO ACTORS (ACTOR_NAME,GENDER, DATE_OF_BIRTH) values("Chris Hemsworth","m",'1983-08-11');
INSERT intO ACTORS (ACTOR_NAME,GENDER, DATE_OF_BIRTH) values("Chris Evans","m",'1981-06-13');
INSERT intO ACTORS (ACTOR_NAME,GENDER, DATE_OF_BIRTH) values("Simon Pegg","m",'1970-02-14');
INSERT intO ACTORS (ACTOR_NAME,GENDER, DATE_OF_BIRTH) values("Bill Murray","m",'1950-09-21');
INSERT intO ACTORS (ACTOR_NAME,GENDER, DATE_OF_BIRTH) values("Jackie Chan","m",'1954-04-07');
INSERT intO ACTORS (ACTOR_NAME,GENDER, DATE_OF_BIRTH) values("Chris Tucker","m",'1971-08-31');
INSERT intO ACTORS (ACTOR_NAME,GENDER, DATE_OF_BIRTH) values("Adam Sandler","m",'1966-09-09');
INSERT intO ACTORS (ACTOR_NAME,GENDER, DATE_OF_BIRTH) values("Bruce Willis","m",'1955-03-19');
INSERT intO ACTORS (ACTOR_NAME,GENDER, DATE_OF_BIRTH) values("Mark Clarkson","m",'1974-09-07');


INSERT intO USERS (NAME,DATE_OF_BIRTH) values("Shreyash Annapureddy",'1994-03-16');
INSERT intO USERS (NAME,DATE_OF_BIRTH) values("Saivan Hamama",'1994-02-09');
INSERT intO USERS (NAME,DATE_OF_BIRTH) values("John Doe",'1993-04-23');
INSERT intO USERS (NAME,DATE_OF_BIRTH) values("Roger Federer",'1975-04-12');


INSERT intO REVIEWS (R_USER_ID, R_MOVIE_ID, MOVIE_RATING, REVIEW_COMMENT) values (1, 6, 5, "Average");
INSERT intO REVIEWS (R_USER_ID, R_MOVIE_ID, MOVIE_RATING, REVIEW_COMMENT) values (1, 8, 3, "Bad");
INSERT intO REVIEWS (R_USER_ID, R_MOVIE_ID, MOVIE_RATING, REVIEW_COMMENT) values (1, 9, 6, "Okay");
INSERT intO REVIEWS (R_USER_ID, R_MOVIE_ID, MOVIE_RATING, REVIEW_COMMENT) values (1, 1, 2, "Awful");
INSERT intO REVIEWS (R_USER_ID, R_MOVIE_ID, MOVIE_RATING, REVIEW_COMMENT) values (1, 3, 1, "Why does this exist");
INSERT intO REVIEWS (R_USER_ID, R_MOVIE_ID, MOVIE_RATING, REVIEW_COMMENT) values (1, 5, 7, "Good");
INSERT intO REVIEWS (R_USER_ID, R_MOVIE_ID, MOVIE_RATING, REVIEW_COMMENT) values (1, 4, 10, "Once in a generation film");
INSERT intO REVIEWS (R_USER_ID, R_MOVIE_ID, MOVIE_RATING, REVIEW_COMMENT) values (1, 10, 6, "Okay");
INSERT intO REVIEWS (R_USER_ID, R_MOVIE_ID, MOVIE_RATING, REVIEW_COMMENT) values (1, 11, 10, "Once in a generation film");
INSERT intO REVIEWS (R_USER_ID, R_MOVIE_ID, MOVIE_RATING, REVIEW_COMMENT) values (1, 7, 2, "Awful");
INSERT intO REVIEWS (R_USER_ID, R_MOVIE_ID, MOVIE_RATING, REVIEW_COMMENT) values (1, 2, 10, "Once in a generation film");
INSERT intO REVIEWS (R_USER_ID, R_MOVIE_ID, MOVIE_RATING, REVIEW_COMMENT) values (2, 6, 2, "Awful");
INSERT intO REVIEWS (R_USER_ID, R_MOVIE_ID, MOVIE_RATING, REVIEW_COMMENT) values (2, 8, 1, "Why does this exist");
INSERT intO REVIEWS (R_USER_ID, R_MOVIE_ID, MOVIE_RATING, REVIEW_COMMENT) values (2, 9, 10, "Once in a generation film");
INSERT intO REVIEWS (R_USER_ID, R_MOVIE_ID, MOVIE_RATING, REVIEW_COMMENT) values (2, 1, 0, "The Depths of Hell");
INSERT intO REVIEWS (R_USER_ID, R_MOVIE_ID, MOVIE_RATING, REVIEW_COMMENT) values (2, 3, 10, "Once in a generation film");
INSERT intO REVIEWS (R_USER_ID, R_MOVIE_ID, MOVIE_RATING, REVIEW_COMMENT) values (2, 5, 4, "Not Great");
INSERT intO REVIEWS (R_USER_ID, R_MOVIE_ID, MOVIE_RATING, REVIEW_COMMENT) values (2, 4, 9, "Excellent");
INSERT intO REVIEWS (R_USER_ID, R_MOVIE_ID, MOVIE_RATING, REVIEW_COMMENT) values (2, 10, 7, "Good");
INSERT intO REVIEWS (R_USER_ID, R_MOVIE_ID, MOVIE_RATING, REVIEW_COMMENT) values (2, 11, 1, "Why does this exist");
INSERT intO REVIEWS (R_USER_ID, R_MOVIE_ID, MOVIE_RATING, REVIEW_COMMENT) values (2, 7, 7, "Good");
INSERT intO REVIEWS (R_USER_ID, R_MOVIE_ID, MOVIE_RATING, REVIEW_COMMENT) values (2, 2, 7, "Good");
INSERT intO REVIEWS (R_USER_ID, R_MOVIE_ID, MOVIE_RATING, REVIEW_COMMENT) values (3, 6, 6, "Okay");
INSERT intO REVIEWS (R_USER_ID, R_MOVIE_ID, MOVIE_RATING, REVIEW_COMMENT) values (3, 8, 4, "Not Great");
INSERT intO REVIEWS (R_USER_ID, R_MOVIE_ID, MOVIE_RATING, REVIEW_COMMENT) values (3, 9, 9, "Excellent");
INSERT intO REVIEWS (R_USER_ID, R_MOVIE_ID, MOVIE_RATING, REVIEW_COMMENT) values (3, 1, 7, "Good");
INSERT intO REVIEWS (R_USER_ID, R_MOVIE_ID, MOVIE_RATING, REVIEW_COMMENT) values (3, 3, 8, "Great");
INSERT intO REVIEWS (R_USER_ID, R_MOVIE_ID, MOVIE_RATING, REVIEW_COMMENT) values (3, 5, 8, "Great");
INSERT intO REVIEWS (R_USER_ID, R_MOVIE_ID, MOVIE_RATING, REVIEW_COMMENT) values (3, 4, 8, "Great");
INSERT intO REVIEWS (R_USER_ID, R_MOVIE_ID, MOVIE_RATING, REVIEW_COMMENT) values (3, 10, 8, "Great");
INSERT intO REVIEWS (R_USER_ID, R_MOVIE_ID, MOVIE_RATING, REVIEW_COMMENT) values (3, 11, 8, "Great");
INSERT intO REVIEWS (R_USER_ID, R_MOVIE_ID, MOVIE_RATING, REVIEW_COMMENT) values (3, 7, 6, "Okay");
INSERT intO REVIEWS (R_USER_ID, R_MOVIE_ID, MOVIE_RATING, REVIEW_COMMENT) values (3, 2, 6, "Okay");
INSERT intO REVIEWS (R_USER_ID, R_MOVIE_ID, MOVIE_RATING, REVIEW_COMMENT) values (4, 6, 1, "Why does this exist");
INSERT intO REVIEWS (R_USER_ID, R_MOVIE_ID, MOVIE_RATING, REVIEW_COMMENT) values (4, 8, 6, "Okay");
INSERT intO REVIEWS (R_USER_ID, R_MOVIE_ID, MOVIE_RATING, REVIEW_COMMENT) values (4, 9, 9, "Excellent");
INSERT intO REVIEWS (R_USER_ID, R_MOVIE_ID, MOVIE_RATING, REVIEW_COMMENT) values (4, 1, 1, "Why does this exist");
INSERT intO REVIEWS (R_USER_ID, R_MOVIE_ID, MOVIE_RATING, REVIEW_COMMENT) values (4, 3, 10, "Once in a generation film");
INSERT intO REVIEWS (R_USER_ID, R_MOVIE_ID, MOVIE_RATING, REVIEW_COMMENT) values (4, 5, 5, "Average");
INSERT intO REVIEWS (R_USER_ID, R_MOVIE_ID, MOVIE_RATING, REVIEW_COMMENT) values (4, 4, 10, "Once in a generation film");
INSERT intO REVIEWS (R_USER_ID, R_MOVIE_ID, MOVIE_RATING, REVIEW_COMMENT) values (4, 10, 9, "Excellent");
INSERT intO REVIEWS (R_USER_ID, R_MOVIE_ID, MOVIE_RATING, REVIEW_COMMENT) values (4, 11, 1, "Why does this exist");
INSERT intO REVIEWS (R_USER_ID, R_MOVIE_ID, MOVIE_RATING, REVIEW_COMMENT) values (4, 7, 10, "Once in a generation film");
INSERT intO REVIEWS (R_USER_ID, R_MOVIE_ID, MOVIE_RATING, REVIEW_COMMENT) values (4, 2, 2, "Awful");


INSERT intO LEADS (LEAD_ACTOR_ID, LEAD_MOVIE_ID) values(1, 1);
INSERT intO LEADS (LEAD_ACTOR_ID, LEAD_MOVIE_ID) values(1, 2);
INSERT intO LEADS (LEAD_ACTOR_ID, LEAD_MOVIE_ID) values(1, 3);
INSERT intO LEADS (LEAD_ACTOR_ID, LEAD_MOVIE_ID) values(2, 1);
INSERT intO LEADS (LEAD_ACTOR_ID, LEAD_MOVIE_ID) values(2, 2);
INSERT intO LEADS (LEAD_ACTOR_ID, LEAD_MOVIE_ID) values(3, 1);
INSERT intO LEADS (LEAD_ACTOR_ID, LEAD_MOVIE_ID) values(3, 2);
INSERT intO LEADS (LEAD_ACTOR_ID, LEAD_MOVIE_ID) values(4, 1);
INSERT intO LEADS (LEAD_ACTOR_ID, LEAD_MOVIE_ID) values(5, 3);
INSERT intO LEADS (LEAD_ACTOR_ID, LEAD_MOVIE_ID) values(5, 6);
INSERT intO LEADS (LEAD_ACTOR_ID, LEAD_MOVIE_ID) values(6, 4);
INSERT intO LEADS (LEAD_ACTOR_ID, LEAD_MOVIE_ID) values(6, 5);
INSERT intO LEADS (LEAD_ACTOR_ID, LEAD_MOVIE_ID) values(7, 5);
INSERT intO LEADS (LEAD_ACTOR_ID, LEAD_MOVIE_ID) values(8, 5);
INSERT intO LEADS (LEAD_ACTOR_ID, LEAD_MOVIE_ID) values(9, 7);
INSERT intO LEADS (LEAD_ACTOR_ID, LEAD_MOVIE_ID) values(10, 8);
INSERT intO LEADS (LEAD_ACTOR_ID, LEAD_MOVIE_ID) values(11, 9);
INSERT intO LEADS (LEAD_ACTOR_ID, LEAD_MOVIE_ID) values(12, 9);
INSERT intO LEADS (LEAD_ACTOR_ID, LEAD_MOVIE_ID) values(13, 10);
INSERT intO LEADS (LEAD_ACTOR_ID, LEAD_MOVIE_ID) values(14, 11);
INSERT intO LEADS (LEAD_ACTOR_ID, LEAD_MOVIE_ID) values(15, 9);
INSERT intO LEADS (LEAD_ACTOR_ID, LEAD_MOVIE_ID) values(15, 10);
INSERT intO LEADS (LEAD_ACTOR_ID, LEAD_MOVIE_ID) values(15, 4);




--QUEST 1
SELECT NAME
FROM USERS u JOIN REVIEWS r JOIN MOVIES m ON u.USER_ID = r.R_USER_ID
WHERE r.R_MOVIE_ID = m.MOVIE_ID AND MONTH(u.DATE_OF_BIRTH) = 4 AND m.MOVIE_NAME = "Notebook" AND r.MOVIE_RATING <= 8
ORDER BY NAME DESC;


--QUEST 2
SELECT MOVIE_NAME, GENRE
FROM USERS u JOIN REVIEWS r JOIN MOVIES m ON u.USER_ID = r.R_USER_ID AND r.R_MOVIE_ID = m.MOVIE_ID
WHERE u.NAME =  "John Doe"  AND MOVIE_RATING = (SELECT MAX(MOVIE_RATING)
FROM USERS u JOIN REVIEWS r JOIN MOVIES m ON u.USER_ID = r.R_USER_ID AND r.R_MOVIE_ID = m.MOVIE_ID
WHERE u.NAME = "John Doe")
ORDER BY GENRE ASC, MOVIE_NAME ASC;

--QUEST 3
SELECT LEAD_MOVIE_ID
FROM LEADS l JOIN ACTORS a ON l.LEAD_ACTOR_ID = a.ACTOR_ID WHERE a.GENDER = "m" GROUP BY LEAD_MOVIE_ID
HAVING COUNT(LEAD_MOVIE_ID) = (SELECT MAX(MEN_IN_LEAD)
FROM (
SELECT LEAD_MOVIE_ID, COUNT(LEAD_MOVIE_ID) MEN_IN_LEAD
FROM LEADS l JOIN ACTORS a ON l.LEAD_ACTOR_ID = a.ACTOR_ID WHERE a.GENDER = "m"
GROUP BY LEAD_MOVIE_ID) as temp_table)
ORDER BY LEAD_MOVIE_ID ASC;

--QUEST 4
SELECT DISTINCT MOVIE_NAME
FROM (MOVIES m JOIN REVIEWS r ON m.MOVIE_ID = r.R_MOVIE_ID)
WHERE m.GENRE = "Comedy" AND YEAR(m.RELEASE_DATE) < 2006
AND r.MOVIE_RATING > (SELECT AVG(movie_avg) as total_avg
FROM(
  SELECT MOVIE_NAME, AVG(MOVIE_RATING) as movie_avg
  FROM MOVIES m JOIN REVIEWS r ON m.MOVIE_ID = r.R_MOVIE_ID
  GROUP BY MOVIE_NAME
  ORDER BY movie_avg
)as avgs)
ORDER BY MOVIE_NAME ASC;


--QUEST 5
SELECT R_MOVIE_ID as Movie_ID, movie_avg
FROM(SELECT R_MOVIE_ID, AVG(MOVIE_RATING) as movie_avg
     FROM REVIEWS r JOIN LEADS l ON r.R_MOVIE_ID = l.LEAD_MOVIE_ID
     GROUP BY R_MOVIE_ID) as avgs
JOIN ACTORS a JOIN LEADS l ON avgs.R_MOVIE_ID = l.LEAD_MOVIE_ID AND a.ACTOR_ID = l.LEAD_ACTOR_ID
WHERE movie_avg > 9 AND a.ACTOR_NAME = "Mark Clarkson"
ORDER BY movie_avg DESC,R_MOVIE_ID DESC;


--QUEST 6
SELECT ACTOR_1, ACTOR_2, COUNT(*) AS NUM_MOVIES_TOGETHER
FROM (SELECT ACTORS.ACTOR_NAME AS ACTOR_1, MOVIES.MOVIE_NAME AS MOVIE_ID1 FROM LEADS
  JOIN ACTORS ON ACTORS.ACTOR_ID = LEADS.LEAD_ACTOR_ID
    JOIN MOVIES ON MOVIES.MOVIE_ID = LEADS.LEAD_MOVIE_ID) AS TEST_1,
    (SELECT ACTORS.ACTOR_NAME AS ACTOR_2, MOVIES.MOVIE_NAME AS MOVIE_ID2 FROM LEADS
  JOIN ACTORS ON ACTORS.ACTOR_ID = LEADS.LEAD_ACTOR_ID
    JOIN MOVIES ON MOVIES.MOVIE_ID = LEADS.LEAD_MOVIE_ID) AS TEST_2
WHERE MOVIE_ID1 = MOVIE_ID2 AND ACTOR_1!=ACTOR_2
GROUP BY ACTOR_1, ACTOR_2
HAVING COUNT(*) = (
SELECT MAX(NUM_MOVIES_TOGETHER)
FROM(
  SELECT ACTOR_1, ACTOR_2, COUNT(*) AS NUM_MOVIES_TOGETHER
  FROM (SELECT ACTORS.ACTOR_NAME AS ACTOR_1, MOVIES.MOVIE_NAME AS MOVIE_ID1 FROM LEADS
    JOIN ACTORS ON ACTORS.ACTOR_ID = LEADS.LEAD_ACTOR_ID
      JOIN MOVIES ON MOVIES.MOVIE_ID = LEADS.LEAD_MOVIE_ID) AS TEST_1,
      (SELECT ACTORS.ACTOR_NAME AS ACTOR_2, MOVIES.MOVIE_NAME AS MOVIE_ID2 FROM LEADS
    JOIN ACTORS ON ACTORS.ACTOR_ID = LEADS.LEAD_ACTOR_ID
      JOIN MOVIES ON MOVIES.MOVIE_ID = LEADS.LEAD_MOVIE_ID) AS TEST_2
  WHERE MOVIE_ID1 = MOVIE_ID2 AND ACTOR_1!=ACTOR_2
  GROUP BY ACTOR_1, ACTOR_2
) AS TABLE_RESULT);
